{
	"components": {
		"patterns": ["src/components/**/*.{tsx,ts}", "src/components/ui/**/*.{tsx,ts}"],
		"conventions": {
			"naming": "PascalCase",
			"extension": ".tsx",
			"exports": "default",
			"props": "interface ComponentProps"
		}
	},
	"pages": {
		"patterns": [
			"src/app/**/page.tsx",
			"src/app/**/layout.tsx",
			"src/app/**/loading.tsx",
			"src/app/**/error.tsx",
			"src/app/**/not-found.tsx"
		],
		"conventions": {
			"naming": "kebab-case directory, page.tsx file",
			"extension": ".tsx",
			"exports": "default",
			"metadata": "export const metadata"
		}
	},
	"api-routes": {
		"patterns": ["src/app/api/**/route.ts"],
		"conventions": {
			"naming": "kebab-case directory, route.ts file",
			"extension": ".ts",
			"exports": "named (GET, POST, etc.)",
			"auth": "Always check auth() and activeOrganizationId"
		}
	},
	"services": {
		"patterns": ["src/services/**/*.ts"],
		"conventions": {
			"naming": "camelCase",
			"extension": ".ts",
			"exports": "named functions",
			"organization": "Always scope to organization"
		}
	},
	"database": {
		"patterns": ["src/lib/db/**/*.ts", "migrations/**/*.sql"],
		"conventions": {
			"naming": "camelCase for functions, snake_case for SQL",
			"extension": ".ts for functions, .sql for migrations",
			"exports": "named functions",
			"queries": "Use parameterized queries, transform snake_case to camelCase"
		}
	},
	"models": {
		"patterns": ["src/models/**/*.ts"],
		"conventions": {
			"naming": "camelCase",
			"extension": ".ts",
			"exports": "Zod schemas and TypeScript types",
			"validation": "Use safeValidateDbResult"
		}
	}
}
